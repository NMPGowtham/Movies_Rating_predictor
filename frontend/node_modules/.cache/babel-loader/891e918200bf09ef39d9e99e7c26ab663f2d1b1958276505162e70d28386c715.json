{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saibh\\\\OneDrive\\\\Desktop\\\\RecMovie\\\\client\\\\src\\\\components\\\\GenreLanguageSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/GenreLanguageSelector.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GenreLanguageSelector = () => {\n  _s();\n  const availableGenres = [\"Action\", \"Drama\", \"Sci-Fi\", \"Horror\", \"Comedy\"];\n  const availableLanguages = [\"English\", \"French\", \"Spanish\", \"Hindi\", \"Japanese\"];\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [selectedLanguages, setSelectedLanguages] = useState([]);\n  const toggleSelection = (item, list, setList) => {\n    if (list.includes(item)) {\n      setList(list.filter(i => i !== item));\n    } else {\n      setList([...list, item]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: availableGenres.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectedGenres.includes(genre) ? \"selected\" : \"\",\n          onClick: () => toggleSelection(genre, selectedGenres, setSelectedGenres),\n          children: genre\n        }, genre, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selection-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Languages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options\",\n        children: availableLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectedLanguages.includes(lang) ? \"selected\" : \"\",\n          onClick: () => toggleSelection(lang, selectedLanguages, setSelectedLanguages),\n          children: lang\n        }, lang, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(GenreLanguageSelector, \"yEsh0koQg/+PNQGePiJoiE7nBIM=\");\n_c = GenreLanguageSelector;\nexport default GenreLanguageSelector;\nvar _c;\n$RefreshReg$(_c, \"GenreLanguageSelector\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GenreLanguageSelector","_s","availableGenres","availableLanguages","selectedGenres","setSelectedGenres","selectedLanguages","setSelectedLanguages","toggleSelection","item","list","setList","includes","filter","i","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","genre","onClick","lang","_c","$RefreshReg$"],"sources":["C:/Users/saibh/OneDrive/Desktop/RecMovie/client/src/components/GenreLanguageSelector.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/GenreLanguageSelector.css\";\r\n\r\nconst GenreLanguageSelector = () => {\r\n  const availableGenres = [\"Action\", \"Drama\", \"Sci-Fi\", \"Horror\", \"Comedy\"];\r\n  const availableLanguages = [\"English\", \"French\", \"Spanish\", \"Hindi\", \"Japanese\"];\r\n\r\n  const [selectedGenres, setSelectedGenres] = useState([]);\r\n  const [selectedLanguages, setSelectedLanguages] = useState([]);\r\n\r\n  const toggleSelection = (item, list, setList) => {\r\n    if (list.includes(item)) {\r\n      setList(list.filter((i) => i !== item));\r\n    } else {\r\n      setList([...list, item]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"selection-box\">\r\n        <h3>Genres</h3>\r\n        <div className=\"options\">\r\n          {availableGenres.map((genre) => (\r\n            <button\r\n              key={genre}\r\n              className={selectedGenres.includes(genre) ? \"selected\" : \"\"}\r\n              onClick={() => toggleSelection(genre, selectedGenres, setSelectedGenres)}\r\n            >\r\n              {genre}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"selection-box\">\r\n        <h3>Languages</h3>\r\n        <div className=\"options\">\r\n          {availableLanguages.map((lang) => (\r\n            <button\r\n              key={lang}\r\n              className={selectedLanguages.includes(lang) ? \"selected\" : \"\"}\r\n              onClick={() => toggleSelection(lang, selectedLanguages, setSelectedLanguages)}\r\n            >\r\n              {lang}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GenreLanguageSelector;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}